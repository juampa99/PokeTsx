{"version":3,"sources":["storage/pokemon.ts","api/pokemon.ts","entities/TPokemon.ts","resources/colors.ts","mappers/pokemon.ts","services/pokemon.ts","components/SearchBarResults.tsx","components/SearchBar.tsx","logo.png","components/HomePage.tsx","components/StatBar.tsx","components/PokemonStats.tsx","components/Types.tsx","components/PokemonCard.tsx","components/Pokemon.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["loadPokemonById","id","Error","pokemon","localStorage","getItem","String","JSON","parse","storePokemon","setItem","stringify","loadPokemonList","pokemonList","BASE_URL","fetchPokemonlist","a","fetch","json","fetchPokemonById","TPokemon","number","name","stats","height","weight","imageUrl","types","this","TYPE_COLORS","STAT_COLORS","fromObjectToEntity","pokemonData","substr","toUpperCase","sprites","other","front_default","order","map","stat","power","base_stat","color","type","capitalize","str","idFromUrl","url","regex","RegExp","dirtyId","match","Number","slice","getPokemonById","getPokemonList","results","SearchBarResults","items","className","item","i","href","SearchBar","list","useState","filteredList","setFilteredList","onChange","event","filtered","filter","regExpText","length","filterPokemonList","target","value","HomePage","setPokemonList","useEffect","src","logo","alt","StatBar","width","style","backgroundColor","PokemonStats","setWidth","document","getElementsByClassName","getBoundingClientRect","getStatBarWidthFraction","Types","borderRadius","paddingLeft","paddingRight","marginLeft","PokemonCard","data","Pokemon","useParams","undefined","setPokemonData","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e6640c20.chunk.js","sourcesContent":["import {TPokemon} from \"../entities/TPokemon\";\n\nfunction loadPokemonById(id: number): TPokemon {\n    if(!id) {\n        throw new Error('Passed invalid id');\n    }\n\n    const pokemon = localStorage.getItem(String(id));\n\n    if(!pokemon) {\n        throw new Error('Pokemon with id '+ id + ' not found');\n    }\n\n    return JSON.parse(pokemon);\n}\n\nfunction storePokemon(pokemon: TPokemon) {\n    if(!pokemon) {\n        throw new Error('Passed invalid pokemon');\n    }\n\n    localStorage.setItem(String(pokemon.id), JSON.stringify(pokemon) );\n}\n\nfunction loadPokemonList() {\n    let pokemonList = localStorage.getItem('pokemonList');\n\n    if(!pokemonList) {\n        throw new Error('Couldnt load pokemon list from local storage')\n    }\n\n    return JSON.parse(pokemonList);\n}\n\nexport { loadPokemonById, storePokemon, loadPokemonList };\n","import { IPokemon } from \"pokeapi-typescript\";\n\nconst BASE_URL = 'https://pokeapi.co/api/v2/pokemon/';\n\nexport async function fetchPokemonlist() {\n    return (await fetch(`${BASE_URL}?offset=0&limit=2000`)).json();\n}\n\nexport async function fetchPokemonByName(name: string): Promise<IPokemon> {\n    return (await fetch(`${BASE_URL}${name}`)).json();\n}\n\nexport async function fetchPokemonById(id: number): Promise<IPokemon> {\n    return (await fetch(`${BASE_URL}${id}`)).json();\n}\n","export type Stat = {\n    name: string,\n    power: number,\n    color: string\n}\n\nexport type Type = {\n    name: string,\n    color: string\n}\n\nexport class TPokemon {\n\n    id : number;\n    number : number;\n    name : string;\n    stats : Array<Stat>;\n    height: number;\n    weight: number;\n    imageUrl: string;\n    types: Array<Type>;\n\n    constructor(\n        {\n            id,\n            number,\n            name,\n            stats,\n            height,\n            weight,\n            imageUrl,\n            types\n        }\n        :\n        {\n            id: number,\n            number: number,\n            name: string,\n            stats: Array<Stat>,\n            height: number,\n            weight: number,\n            imageUrl: string,\n            types: Array<Type>\n    }) {\n        this.id = id;\n        this.number = number;\n        this.name = name;\n        this.stats = stats;\n        this.height = height;\n        this.weight = weight;\n        this.imageUrl = imageUrl;\n        this.types = types;\n    }\n}\n","import { indexableObject } from \"../entities/indexableObject\";\n\nconst TYPE_COLORS: indexableObject = {\n    'fire': '#fd7d24',\n    'grass': '#9bcc50',\n    'poison': '#b97fc9',\n    'flying': '#bdb9b8',\n    'water': '#4592c4',\n    'bug': '#729f3f',\n    'normal': '#a4acaf',\n    'electric': '#eed535',\n    'ground': '#ab9842',\n    'fairy': '#fdb9e9',\n    'psychic': '#f366b9',\n    'fighting': '#d56723',\n    'rock': '#a38c21',\n    'steel': '#9eb7b8',\n    'ice': '#51c4e7',\n    'ghost': '#7b62a3',\n    'dragon': '#f16e57',\n    'dark': '#707070'\n}\n\nconst STAT_COLORS: indexableObject = {\n    \"hp\": \"#FF4136\",\n    \"attack\": \"#FF851B\",\n    \"defense\": \"#2ECC40\",\n    \"special-attack\": \" #0074D9\",\n    \"special-defense\": \"#B10DC9\",\n    \"speed\": \"#FFDC00\"\n}\n\nexport { STAT_COLORS, TYPE_COLORS };\n","import {IPokemon} from \"pokeapi-typescript\";\nimport {TPokemon, Type} from \"../entities/TPokemon\";\nimport {STAT_COLORS, TYPE_COLORS} from \"../resources/colors\";\n\nfunction fromObjectToEntity(pokemonData: IPokemon) {\n\n    const id = pokemonData.id;\n    const name = pokemonData.name.substr(0, 1)?.toUpperCase() + pokemonData.name.substr(1);\n\n    // Typing is wrong, the property 'other' exists for most pokemon\n    // TODO: Use custom typing for this\n    // @ts-ignore\n    const imageUrl = pokemonData.sprites.other['official-artwork'].front_default ?? pokemonData.sprites.front_default;\n\n    const number = pokemonData.order;\n\n    const height = pokemonData.height;\n    const weight = pokemonData.weight;\n\n    const stats: any = pokemonData.stats.map( stat=> {\n        return {\n            name: stat.stat.name,\n            power: stat.base_stat,\n            color: STAT_COLORS[stat.stat.name]\n        }\n    });\n\n    const types = pokemonData.types.map( (type) => {\n        return {\n             name: type.type.name,\n             color: TYPE_COLORS[type.type.name]\n        }\n    } );\n\n    return (new TPokemon({\n        id,\n        number,\n        name,\n        stats,\n        height,\n        weight,\n        imageUrl,\n        types\n    }))\n}\n\nexport { fromObjectToEntity };\n","import { PokemonItem } from \"../entities/PokemonItem\";\nimport {loadPokemonById, loadPokemonList, storePokemon} from \"../storage/pokemon\";\nimport {TPokemon} from \"../entities/TPokemon\";\nimport {fetchPokemonById, fetchPokemonlist} from \"../api/pokemon\";\nimport {fromObjectToEntity} from \"../mappers/pokemon\";\n\n\nfunction filterPokemonList(filter: string, pokemonList: Array<PokemonItem>): Array<PokemonItem> {\n\n    const regExpText = new RegExp(filter, 'i');\n    let filtered : Array<PokemonItem>;\n\n    if(filter !== \"\" && pokemonList && pokemonList.length > 0) {\n\n        filtered = pokemonList.filter( (item: PokemonItem ) => {\n            return item.name.match(regExpText);\n        })\n\n        filtered = filtered.slice(0, 3);\n\n    } else {\n        filtered = [];\n    }\n\n    return filtered;\n}\n\nfunction capitalize(str: string): string {\n    return str ? str.substr(0, 1).toUpperCase() + str.substr(1) : str;\n}\n\nfunction idFromUrl(url: string): number {\n    const regex = new RegExp(\"[^pokemon]*$\");\n    let dirtyId = url.match(regex)?.[0];\n\n    if(!dirtyId)\n        return 1;\n\n    return Number(dirtyId.substr(1).slice(0, -1));\n}\n\nfunction getStatBarWidthFraction() {\n    return document.getElementsByClassName(\"statBar\")[0]?.getBoundingClientRect().width / 255;\n}\n\nasync function getPokemonById(id: number) {\n    let pokemon: TPokemon;\n\n    try {\n        pokemon = loadPokemonById(id);\n    }\n    catch {\n        pokemon = fromObjectToEntity(await fetchPokemonById(id));\n        storePokemon(pokemon);\n    }\n\n    return pokemon;\n}\n\nasync function getPokemonList(): Promise<any> {\n    let pokemonList;\n\n    try {\n        pokemonList = loadPokemonList();\n    }\n    catch {\n        pokemonList = await fetchPokemonlist();\n    }\n\n    return pokemonList.results;\n}\n\nexport { filterPokemonList, capitalize, idFromUrl, getStatBarWidthFraction, getPokemonById, getPokemonList };\n","import {capitalize, idFromUrl} from \"../services/pokemon\";\n\nconst SearchBarResults = ( { items } : { items: { name: string, url: string }[] } ) => {\n\n    function mapSearchResults(item: {name: string, url:string}, i: number) {\n        idFromUrl(item.url);\n        return <li key={i}> <a href={ \"/pokemon/\" + idFromUrl(item.url)}> { capitalize(item.name) } </a></li>\n    }\n\n    return (\n        <div className=\"search_bar_dropdown\">\n            <ul>\n                { items.map(mapSearchResults) }\n            </ul>\n        </div>\n    )\n}\n\nexport {SearchBarResults};\n","import { ChangeEvent, useState } from \"react\";\nimport { SearchBarResults } from \"./SearchBarResults\";\nimport { filterPokemonList } from \"../services/pokemon\";\nimport { IApiResource } from \"pokeapi-typescript/dist/interfaces/Utility/ApiResourceList\";\nimport {PokemonItem} from \"../entities/PokemonItem\";\n\nconst SearchBar = ({list}: { list: Array<PokemonItem> }) => {\n    const [ filteredList, setFilteredList ] = useState([]);\n\n    function onType(event: ChangeEvent<HTMLInputElement>) {\n        const text = event.target.value;\n        const filtered = filterPokemonList(text, list);\n        // @ts-ignore\n        setFilteredList(filtered);\n    }\n\n    return (\n        <div className=\"search_bar\">\n            <input onChange={onType} type=\"text\" />\n            <SearchBarResults items={filteredList} />\n        </div>\n    )\n}\n\nexport {SearchBar};\n","export default __webpack_public_path__ + \"static/media/logo.140d90cb.png\";","import {SearchBar} from \"./SearchBar\";\nimport {useEffect, useState} from \"react\";\nimport logo from \"../logo.png\";\nimport {getPokemonList} from \"../services/pokemon\";\n\nconst HomePage = () => {\n    const [pokemonList, setPokemonList] = useState([]);\n\n    // Loads pokemon list\n    useEffect( () => {\n        ( async () => {\n            setPokemonList( await getPokemonList() )\n        })()\n    }, []);\n\n    return (\n        <>\n            <div className=\"searchBarAndLogo\">\n                <img className=\"logo\" src={logo} alt=\"PokeTsx Logo\" />\n                <SearchBar list={pokemonList} />\n            </div>\n        </>\n    )\n}\n\nexport {HomePage};\n","import {Stat} from \"../entities/TPokemon\";\n\nconst StatBar = ({ width, stat }: {width: number, stat: Stat }) => {\n\n    let style: any = {};\n\n    if( width && width !== 0 ) style.width = width  * stat.power + \"px\";\n\n    style.backgroundColor = stat.color;\n\n    return (\n        <div className=\"statBar\" style={style} > <div> {stat.power} </div> </div>\n    )\n}\n\nexport {StatBar};\n","import {Stat} from \"../entities/TPokemon\";\nimport {capitalize, getStatBarWidthFraction} from \"../services/pokemon\";\nimport {useEffect, useState} from \"react\";\nimport {StatBar} from \"./StatBar\";\n\nconst PokemonStats = ({stats} : {stats: Stat[] }) => {\n\n    let [width, setWidth] = useState(0);\n\n    useEffect(() => {\n        setWidth(getStatBarWidthFraction());\n    }, [])\n\n    return (\n        <>\n            {stats.map((stat: Stat, i: number) => {\n                return (\n                    <h3 key={i}> {capitalize(stat.name)}\n\n                        <div className=\"stat-bars\">\n                            <StatBar width={width} stat={stat} />\n                        </div>\n\n                    </h3>\n                )\n            })}\n        </>\n    )\n}\n\nexport {PokemonStats};\n","import {Type} from \"../entities/TPokemon\";\nimport {capitalize} from \"../services/pokemon\";\n\nconst Types = ( {types} : { types: Type[] } ) => {\n\n    function mapType(type: Type, i: number) {\n        return <span className=\"type\" style={\n            {\n                backgroundColor: type.color,\n                color: \"white\",\n                borderRadius: \"15px\",\n                paddingLeft: \"5px\",\n                paddingRight: \"5px\",\n                marginLeft: \"5px\"\n            }} key={i}> {capitalize(type.name)} </span>;\n    }\n\n    return (\n        <h2>\n            Types: { types.map(mapType) }\n        </h2>\n    )\n}\n\nexport { Types };\n","import { PokemonStats } from \"./PokemonStats\";\nimport { TPokemon } from \"../entities/TPokemon\";\nimport { Types } from \"./Types\";\n\nconst PokemonCard = ( { data }: { data: TPokemon | undefined } ) => {\n\n    let pokemonData : TPokemon;\n\n    if(data) {\n        pokemonData = data;\n    }\n    else {\n        return <></>;\n    }\n\n    return (\n        <div className=\"pokemon_card\" >\n            <h1 className=\"pokemon-title\" >\n                <div className=\"pokemon-order\"> { pokemonData.number } </div>\n                <div className=\"pokemon-name\"> { pokemonData.name } </div>\n            </h1>\n\n            <hr/>\n\n            <img src={pokemonData.imageUrl } alt=\"Pokemon image\" />\n\n            <div>\n                <Types types={pokemonData.types} />\n\n                <div>\n                    <h2>Height: {pokemonData.height}</h2>\n                    <h2>Weight: {pokemonData.weight}</h2>\n                </div>\n\n            </div>\n\n            <PokemonStats stats={pokemonData.stats} />\n\n        </div>\n\n    )\n}\n\nexport { PokemonCard };\n","import { useParams } from \"react-router-dom\";\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { PokemonCard } from \"./PokemonCard\";\nimport { TPokemon } from \"../entities/TPokemon\";\nimport {getPokemonById} from \"../services/pokemon\";\n\nconst Pokemon = () => {\n    const { id } = useParams<{ id: string }>();\n    let [pokemonData, setPokemonData] :\n        [ TPokemon | undefined , Dispatch<SetStateAction<any>> ] = useState(undefined );\n\n\n    useEffect( () => {\n        ( async () => {\n            setPokemonData( await getPokemonById(Number(id)) );\n        })()\n    }, [])\n\n    return (\n        <div className=\"pokemonContainer\">\n            { pokemonData ?  <PokemonCard data={pokemonData} /> : <></> }\n        </div>\n    )\n}\n\nexport { Pokemon };\n","import React from 'react';\nimport './style/home_page.css'\nimport './style/pokemon_card.css'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport { HomePage } from './components/HomePage';\nimport { Pokemon } from \"./components/Pokemon\";\n\nfunction App() {\n  return (\n      <Router>\n        <div className=\"app\" >\n            <Switch>\n                <Route path=\"/pokemon/:id\">\n                    <Pokemon />\n                </Route>\n                <Route path=\"/\">\n                    <HomePage />\n                </Route>\n            </Switch>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}